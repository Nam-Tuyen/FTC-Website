"""
Service x·ª≠ l√Ω ki·∫øn th·ª©c v·ªÅ c√¢u l·∫°c b·ªô
"""
import logging
from typing import Optional, List, Dict
from utils.text_processor import TextProcessor
from data.club_data import CLUB_FAQ, CLUB_KEYWORDS, CLUB_INFO, DEPARTMENTS, ACTIVITIES

logger = logging.getLogger(__name__)

class ClubKnowledgeService:
    """Service qu·∫£n l√Ω ki·∫øn th·ª©c v·ªÅ c√¢u l·∫°c b·ªô"""
    
    def __init__(self):
        self.text_processor = TextProcessor()
        self.faq_data = CLUB_FAQ
        self.club_keywords = CLUB_KEYWORDS
        
    def is_club_related(self, question: str) -> bool:
        """Ki·ªÉm tra c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn c√¢u l·∫°c b·ªô kh√¥ng"""
        has_keywords, score = self.text_processor.contains_keywords(question, self.club_keywords)
        return has_keywords and score > 0.1
    
    def find_best_faq_match(self, question: str) -> Optional[str]:
        """
        T√¨m c√¢u tr·∫£ l·ªùi ph√π h·ª£p nh·∫•t t·ª´ FAQ
        
        Args:
            question: C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
            
        Returns:
            C√¢u tr·∫£ l·ªùi ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        best_score = 0.0
        best_answer = None
        
        for faq_item in self.faq_data:
            # T√≠nh ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng v·ªõi t·ª´ng keyword
            for keyword in faq_item["keywords"]:
                similarity = self.text_processor.calculate_similarity(question, keyword)
                if similarity > best_score:
                    best_score = similarity
                    best_answer = faq_item["answer"]
        
        # Ch·ªâ tr·∫£ v·ªÅ n·∫øu ƒë·ªô t∆∞∆°ng ƒë·ªìng ƒë·ªß cao
        if best_score >= 0.3:
            return best_answer
        
        return None
    
    def get_club_info_response(self, question: str) -> str:
        """T·∫°o ph·∫£n h·ªìi d·ª±a tr√™n th√¥ng tin c√¢u l·∫°c b·ªô"""
        normalized_q = self.text_processor.normalize_vietnamese(question)
        
        # Ki·ªÉm tra c√¢u h·ªèi v·ªÅ c√°c ban
        if any(word in normalized_q for word in ['ban', 'phong ban', 'co cau']):
            response = "üè∑Ô∏è **C∆° c·∫•u c√°c ban trong FTC:**\n\n"
            for dept_key, dept_info in DEPARTMENTS.items():
                response += f"‚Ä¢ **{dept_info['name']}**: {dept_info['description']}\n"
            return response
        
        # Ki·ªÉm tra c√¢u h·ªèi v·ªÅ ho·∫°t ƒë·ªông
        if any(word in normalized_q for word in ['hoat dong', 'su kien', 'chuong trinh']):
            response = "üéØ **Ho·∫°t ƒë·ªông ti√™u bi·ªÉu c·ªßa FTC:**\n\n"
            for activity in ACTIVITIES:
                response += f"‚Ä¢ **{activity['name']}**: {activity['description']} ({activity['frequency']})\n"
            return response
        
        # Th√¥ng tin li√™n h·ªá
        if any(word in normalized_q for word in ['lien he', 'email', 'fanpage']):
            return f"""üìÆ **Th√¥ng tin li√™n h·ªá:**
‚Ä¢ Email: {CLUB_INFO['email']}
‚Ä¢ Fanpage: {CLUB_INFO['fanpage']}
‚Ä¢ C·ªë v·∫•n: {CLUB_INFO['advisor']}"""
        
        # Th√¥ng tin chung v·ªÅ CLB
        return f"""üëã **V·ªÅ C√¢u l·∫°c b·ªô C√¥ng ngh·ªá ‚Äì T√†i ch√≠nh (FTC):**

{CLUB_INFO['name']} l√† c·ªông ƒë·ªìng sinh vi√™n {CLUB_INFO['university']} y√™u th√≠ch c√¥ng ngh·ªá t√†i ch√≠nh.

üìÖ Th√†nh l·∫≠p: {CLUB_INFO['established']}
üè´ Tr·ª±c thu·ªôc: {CLUB_INFO['faculty']}
üë®‚Äçüè´ C·ªë v·∫•n: {CLUB_INFO['advisor']}

Ch√∫ng t√¥i t·ªï ch·ª©c h·ªôi th·∫£o, th·ª±c h√†nh, d·ª± √°n th·ª±c t·∫ø ƒë·ªÉ b·∫°n **h·ªçc s√¢u ‚Äì l√†m th·∫≠t ‚Äì k·∫øt n·ªëi r·ªông**.

üìÆ Li√™n h·ªá: {CLUB_INFO['email']}"""
    
    def get_fallback_response(self, question: str) -> str:
        """Ph·∫£n h·ªìi d·ª± ph√≤ng khi kh√¥ng t√¨m th·∫•y th√¥ng tin"""
        return f"""M√¨nh ƒë√£ nh·∫≠n c√¢u h·ªèi: "{question}". Hi·ªán ch∆∞a c√≥ th√¥ng tin chi ti·∫øt trong FAQ.

B·∫°n c√≥ th·ªÉ:
‚Ä¢ G·ª≠i mail: {CLUB_INFO['email']}
‚Ä¢ Nh·∫Øn fanpage: {CLUB_INFO['fanpage']}
‚Ä¢ Th·ª≠ ƒë·∫∑t c√¢u h·ªèi kh√°c v·ªÅ th√†nh vi√™n, l·ªãch sinh ho·∫°t, h·ªçc thu·∫≠t, s·ª± ki·ªán, truy·ªÅn th√¥ng, t√†i ch√≠nh c√° nh√¢n, nh√¢n s·ª±‚Ä¶"""