// /lib/club-faq.ts
export type ClubFaqItem = {
  patterns: string[]; // c·ª•m t·ª´ kh√≥a (kh√¥ng d·∫•u, ch·ªØ th∆∞·ªùng)
  answer: string;     // tr·∫£ l·ªùi (ti·∫øng Vi·ªát, th√¢n thi·ªán)
};

export const CONTACT_EMAIL = 'clbcongnghetaichinh@st.uel.edu.vn';
export const FANPAGE_URL   = 'https://www.facebook.com/clbfintechuel';

export function normalizeVi(s: string) {
  return s
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/ƒë/g, 'd')
    // Cho ph√©p 1 s·ªë k√Ω t·ª± ph·ªï bi·∫øn trong c√¢u h·ªèi
    .replace(/[^a-z0-9\s?.,:;!@#$\/+()_-]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();
}

const faq: ClubFaqItem[] = [
  // 1) Gi·ªõi thi·ªáu CLB
  {
    patterns: [
      'gioi thieu', 'clb la gi', 'cau lac bo la gi', 've clb',
      'ftc la gi', 'clb cong nghe tai chinh', 'fintech club uel'
    ],
    answer:
`üëã **CLB C√¥ng ngh·ªá ‚Äì T√†i ch√≠nh (FTC)** l√† c·ªông ƒë·ªìng sinh vi√™n UEL y√™u th√≠ch c√¥ng ngh·ªá t√†i ch√≠nh.
FTC th√†nh l·∫≠p 11/2020, tr·ª±c thu·ªôc Khoa T√†i ch√≠nh ‚Äì Ng√¢n h√†ng.
B·ªçn m√¨nh t·ªï ch·ª©c h·ªôi th·∫£o, th·ª±c h√†nh, d·ª± √°n th·ª±c t·∫ø, nh√≥m nghi√™n c·ª©u, gi·ªù l·∫≠p tr√¨nh,
li√™n k·∫øt doanh nghi·ªáp v√† tham quan ƒë∆°n v·ªã ƒë·ªÉ b·∫°n *h·ªçc s√¢u ‚Äì l√†m th·∫≠t ‚Äì k·∫øt n·ªëi r·ªông*.`,
  },

  // 2) C√°ch tham gia / quy tr√¨nh
  {
    patterns: ['tham gia', 'dang ky', 'ung tuyen', 'cach tham gia', 'quy trinh tham gia'],
    answer:
`üìù **C√°ch tham gia**:
1) ƒêi·ªÅn ƒë∆°n ƒëƒÉng k√Ω ·ªü trang *·ª®ng tuy·ªÉn*;
2) Ch·ªçn ban ph√π h·ª£p (H·ªçc thu·∫≠t, S·ª± ki·ªán, Truy·ªÅn th√¥ng, T√†i ch√≠nh c√° nh√¢n, Nh√¢n s·ª±);
3) Ph·ªèng v·∫•n ng·∫Øn;
4) Bu·ªïi l√†m quen & b·∫Øt ƒë·∫ßu ho·∫°t ƒë·ªông.
Y√™u c·∫ßu: nhi·ªát huy·∫øt v√† tinh th·∫ßn h·ªçc h·ªèi ‚Äì s·∫Ω c√≥ ng∆∞·ªùi h∆∞·ªõng d·∫´n t·ª´ ƒë·∫ßu.`,
  },

  // 3) C∆° c·∫•u ban trong CLB
  {
    patterns: ['cac ban', 'ban trong clb', 'phong ban', 'co cau ban', 'ban hoc thuat', 'ban su kien', 'ban truyen thong', 'ban tai chinh ca nhan', 'ban nhan su'],
    answer:
`üè∑Ô∏è **C∆° c·∫•u ban**
‚Ä¢ *H·ªçc thu·∫≠t*: n·ªôi dung Fintech, d·ªØ li·ªáu, SQL, ph√¢n t√≠ch, thu·∫≠t to√°n.
‚Ä¢ *S·ª± ki·ªán*: √Ω t∆∞·ªüng, k·ªãch b·∫£n, v·∫≠n h√†nh ch∆∞∆°ng tr√¨nh, b√°o c√°o.
‚Ä¢ *Truy·ªÅn th√¥ng*: qu·∫£n tr·ªã k√™nh, vi·∫øt n·ªôi dung, thi·∫øt k·∫ø, ·∫£nh/video.
‚Ä¢ *T√†i ch√≠nh c√° nh√¢n*: MoneyWe, ch·ªß ƒë·ªÅ t√†i ch√≠nh c√° nh√¢n ·ª©ng d·ª•ng c√¥ng ngh·ªá.
‚Ä¢ *Nh√¢n s·ª±*: n·ªôi quy, vƒÉn h√≥a, tuy·ªÉn ‚Äì ph√¢n c√¥ng ‚Äì ƒë√°nh gi√°, minh b·∫°ch qu·ªπ.`,
  },

  // 4) L·ªãch sinh ho·∫°t
  {
    patterns: ['lich sinh hoat', 'thoi gian sinh hoat', 'lich hop', 'lich clb'],
    answer:
`üóìÔ∏è **L·ªãch sinh ho·∫°t**: ƒë·ªãnh k·ª≥ ~2 tu·∫ßn/l·∫ßn & theo k·∫ø ho·∫°ch t·ª´ng ch∆∞∆°ng tr√¨nh.
Th√¥ng b√°o chi ti·∫øt tr√™n fanpage v√† website tr∆∞·ªõc s·ª± ki·ªán ‚â•7 ng√†y.`,
  },

  // 5) Chi ph√≠
  {
    patterns: ['chi phi', 'phi thanh vien', 'phi tham gia', 'dong phi'],
    answer:
`üí≥ **Chi ph√≠**: kh√¥ng thu ph√≠ th√†nh vi√™n b·∫Øt bu·ªôc.
M·ªôt s·ªë chuy√™n ƒë·ªÅ c√≥ th·ªÉ thu m·ª©c ph√≠ nh·ªè ƒë·ªÉ b√π chi ph√≠;
th√†nh vi√™n t√≠ch c·ª±c th∆∞·ªùng ƒë∆∞·ª£c ∆∞u ti√™n mi·ªÖn/gi·∫£m.`,
  },

  // 6) H∆∞·ªõng d·∫´n ‚Äì ƒë·ªìng h√†nh
  {
    patterns: ['mentoring', 'huong dan', 'co van', 'dong hanh', 'nguoi huong dan'],
    answer:
`üß≠ **H∆∞·ªõng d·∫´n ‚Äì ƒë·ªìng h√†nh**: ch∆∞∆°ng tr√¨nh mentor theo nh√≥m k·ªπ nƒÉng (d·ªØ li·ªáu, s·∫£n ph·∫©m s·ªë, truy·ªÅn th√¥ng).
M·ªü ƒëƒÉng k√Ω ƒë·∫ßu m·ªói h·ªçc k·ª≥, t·∫≠p trung *c·∫ßm tay ch·ªâ vi·ªác* cho th√†nh vi√™n m·ªõi.`,
  },

  // 7) D·ª± √°n th·ª±c t·∫ø
  {
    patterns: ['du an thuc te', 'project', 'hop tac', 'san pham', 'lam thuc te'],
    answer:
`üí° **D·ª± √°n th·ª±c t·∫ø**: tham gia x√¢y c√¥ng c·ª• ph√¢n t√≠ch, dashboard d·ªØ li·ªáu, s·∫£n ph·∫©m s·ªë nh·ªè,
th·ª±c h√†nh giao d·ªãch theo thu·∫≠t to√°n (k√®m nguy√™n t·∫Øc qu·∫£n tr·ªã r·ªßi ro).
C∆° h·ªôi x√¢y h·ªì s∆° nƒÉng l·ª±c, ƒë∆∞·ª£c gi·ªõi thi·ªáu th·ª±c t·∫≠p.`,
  },

  // 8) C∆° h·ªôi th·ª±c t·∫≠p
  {
    patterns: ['thuc tap', 'co hoi thuc tap', 'tuyen dung', 'gioi thieu thuc tap'],
    answer:
`üéØ **Th·ª±c t·∫≠p**: CLB k·∫øt n·ªëi doanh nghi·ªáp c√¥ng ngh·ªá ‚Äì t√†i ch√≠nh.
Th√†nh vi√™n c√≥ s·∫£n ph·∫©m/d·ª± √°n & ƒë√≥ng g√≥p n·ªïi b·∫≠t s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n gi·ªõi thi·ªáu.`,
  },

  // 9) Li√™n h·ªá
  {
    patterns: ['lien he', 'hotline', 'email', 'facebook', 'fanpage'],
    answer:
`üìÆ **Li√™n h·ªá**:
‚Ä¢ Email: ${CONTACT_EMAIL}
‚Ä¢ Fanpage: ${FANPAGE_URL}
B·∫°n c√≥ th·ªÉ nh·∫Øn tr·ª±c ti·∫øp fanpage ‚ÄúFTC ‚Äì C√¢u l·∫°c b·ªô C√¥ng ngh·ªá ‚Äì T√†i ch√≠nh UEL‚Äù ho·∫∑c d√πng email tr√™n.`,
  },
];

function scoreMatch(queryNorm: string, pattern: string) {
  if (queryNorm.includes(pattern)) return 100;
  const words = pattern.split(' ').filter(Boolean);
  let hit = 0;
  words.forEach((w) => {
    if (queryNorm.includes(w)) hit += 1;
  });
  return Math.round((hit / Math.max(words.length, 1)) * 80);
}

export function matchClubFaq(userText: string): string | null {
  const q = normalizeVi(userText);
  let best = { idx: -1, score: 0 };
  faq.forEach((item, i) => {
    let s = 0;
    item.patterns.forEach((p) => (s = Math.max(s, scoreMatch(q, p))));
    if (s > best.score) best = { idx: i, score: s };
  });
  // ng∆∞·ª°ng m·ªÅm ƒë·ªÉ nh·∫≠n di·ªán √Ω g·∫ßn ƒë√∫ng
  if (best.idx >= 0 && best.score >= 45) return faq[best.idx].answer;
  return null;
}

export type IndustryDomain = 'fintech' | 'blockchain' | 'banking' | 'payments' | 'economics' | 'other';

const industryKeywords = [
  'fintech', 'blockchain', 'smart contract', 'defi', 'dex', 'staking', 'yield',
  'stablecoin', 'cbdc', 'on chain', 'off chain', 'wallet', 'kyc', 'aml',
  'onramp', 'offramp', 'token', 'nft',
  'ngan hang', 'banking', 'bank', 'core banking', 'open banking', 'payments', 'thanh toan',
  'qr', 'pci dss', 'iso 20022', 'swift gpi', 'risk', 'fraud', 'chong gian lan',
  'loan', 'tin dung', 'lai suat', 'interchange',
  'machine learning', 'ai', 'ml', 'nlp', 'detect', 'churn', 'recommendation',
  'chung khoan', 'chi so', 'trai phieu', 'trai phieu doanh nghiep', 'crypto', 'bitcoin', 'eth',
];

export function shouldRouteToIndustry(question: string): { yes: boolean; domain?: IndustryDomain } {
  const q = normalizeVi(question);
  const yes = industryKeywords.some((kw) => q.includes(normalizeVi(kw)));
  let domain: IndustryDomain = 'other';
  if (q.includes('blockchain') || q.includes('defi') || q.includes('smart contract') || q.includes('crypto')) domain = 'blockchain';
  else if (q.includes('fintech')) domain = 'fintech';
  else if (q.includes('ngan hang') || q.includes('bank')) domain = 'banking';
  else if (q.includes('thanh toan') || q.includes('payments') || q.includes('qr')) domain = 'payments';
  return { yes, domain };
}

export function getDefaultWelcomeMessage() {
  return (
`Xin ch√†o! T√¥i l√† **FTC AI Assistant**.

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ c√¢u l·∫°c b·ªô
‚Ä¢ Gi·∫£i th√≠ch kh√°i ni·ªám Fintech
‚Ä¢ H∆∞·ªõng d·∫´n tham gia ho·∫°t ƒë·ªông
‚Ä¢ T√¨m th√¥ng tin tr√™n website

üìÆ Li√™n h·ªá: ${CONTACT_EMAIL}
üìò Fanpage: ${FANPAGE_URL}`
  );
}

export function getBotFallbackAnswer(raw: string) {
  return (
`M√¨nh ƒë√£ nh·∫≠n c√¢u h·ªèi: "${raw}". Hi·ªán ch∆∞a c√≥ th√¥ng tin chi ti·∫øt trong FAQ.

B·∫°n c√≥ th·ªÉ:
‚Ä¢ G·ª≠i mail: ${CONTACT_EMAIL}
‚Ä¢ Nh·∫Øn fanpage: ${FANPAGE_URL}
‚Ä¢ Th·ª≠ ƒë·∫∑t c√¢u h·ªèi kh√°c v·ªÅ th√†nh vi√™n, l·ªãch sinh ho·∫°t, h·ªçc thu·∫≠t, s·ª± ki·ªán, truy·ªÅn th√¥ng, t√†i ch√≠nh c√° nh√¢n, nh√¢n s·ª±‚Ä¶`
  );
}
